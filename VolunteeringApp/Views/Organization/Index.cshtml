@model PaginatedList<VolunteeringApp.Models.Identity.Organization>
@using VolunteeringApp.Helpers
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
<h1>Organizations</h1>
    <form asp-controller="Organization" asp-action="Index">
        <div class="form-actions no-color">
            <p>
                <!--Search by name-->
                Search by name: <input type="text" name="SearchString" />
                <input class="btn btn-secondary" type="submit" value="Search" /> 
                <!--Filter By Type-->
                @if (ViewBag.isFiltered == true)
                {
                <a class="btn btn-outline-secondary" asp-action ="Index" > Back to Full List </a>
                }

            </p>
        </div>
    </form>
</div>
<div class="container container-fluid">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-4">
        @foreach (var item in Model)
        {
            @await Html.PartialAsync("_OrganizationCard", item)
        }   
    </div>
</div>
<div class="container">
    <!-- Nav links between pages-->
    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @prevDisabled">
        Previous
    </a>
    <a asp-action="Index"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @nextDisabled">
        Next
    </a>
</div>